TOKEN_SINGLECOMMENT, Valid identifiers:
TOKEN_ID, _age
TOKEN_ID, height
TOKEN_ID, Name
TOKEN_ID, School
TOKEN_ID, calculate
TOKEN_DATATYPE, char
TOKEN_ID, favorite_letter
TOKEN_SINGLECOMMENT, Invalid identifiers:
TOKEN_NUMBER, 1
TOKEN_ID, name
TOKEN_SINGLECOMMENT, score
TOKEN_NUMBER, 9
TOKEN_ID, _age
TOKEN_ID, age
TOKEN_OPERATOR, %
TOKEN_ID, my
TOKEN_ID, name
TOKEN_ID, price
TOKEN_SYMBOL, @
TOKEN_SINGLECOMMENT, integer
TOKEN_CONST, const
TOKEN_DATATYPE, int
TOKEN_ID, x
TOKEN_OPERATOR, =
TOKEN_NUMBER, 10
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, float
TOKEN_CONST, const
TOKEN_DATATYPE, float
TOKEN_ID, pi
TOKEN_OPERATOR, =
TOKEN_NUMBER, 3.14159
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, boolean
TOKEN_CONST, const
TOKEN_DATATYPE, bool
TOKEN_ID, isActive
TOKEN_OPERATOR, =
TOKEN_BOOL, true
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, char
TOKEN_CONST, const
TOKEN_DATATYPE, char
TOKEN_ID, grade
TOKEN_OPERATOR, =
TOKEN_CHAR, A
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, string
TOKEN_CONST, const
TOKEN_DATATYPE, string
TOKEN_ID, message
TOKEN_OPERATOR, =
TOKEN_STRING, Hello World
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, void
TOKEN_DATATYPE, void
TOKEN_ID, myFunction
TOKEN_LPAREN, (
TOKEN_RPAREN, )
TOKEN_LBRACE, {
TOKEN_RETURN, return
TOKEN_SEMI, ;
TOKEN_RBRACE, }
TOKEN_SINGLECOMMENT, Arithmetic
TOKEN_OPERATOR, +
TOKEN_OPERATOR, -
TOKEN_OPERATOR, *
TOKEN_OPERATOR, /
TOKEN_OPERATOR, %
TOKEN_OPERATOR, **
TOKEN_OPERATOR, //
TOKEN_SINGLECOMMENT, Example Arithmetic
TOKEN_ID, result
TOKEN_OPERATOR, =
TOKEN_ID, desktopPrice
TOKEN_OPERATOR, +
TOKEN_ID, laptopPrice
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, Logical
TOKEN_OPERATOR, and
TOKEN_OPERATOR, or
TOKEN_OPERATOR, not
TOKEN_SINGLECOMMENT, Example Logical
TOKEN_IF, if
TOKEN_LPAREN, (
TOKEN_ID, x
TOKEN_OPERATOR, >
TOKEN_NUMBER, 0
TOKEN_OPERATOR, and
TOKEN_ID, y
TOKEN_OPERATOR, <
TOKEN_NUMBER, 10
TOKEN_RPAREN, )
TOKEN_SINGLECOMMENT, Relational
TOKEN_OPERATOR, <
TOKEN_OPERATOR, <=
TOKEN_OPERATOR, >
TOKEN_OPERATOR, >=
TOKEN_OPERATOR, !=
TOKEN_OPERATOR, ==
TOKEN_SINGLECOMMENT, Example Relational
TOKEN_IF, if
TOKEN_LPAREN, (
TOKEN_ID, age
TOKEN_OPERATOR, ==
TOKEN_ID, targetAge
TOKEN_RPAREN, )
TOKEN_SINGLECOMMENT, Assignment
TOKEN_OPERATOR, =
TOKEN_OPERATOR, +=
TOKEN_OPERATOR, -=
TOKEN_OPERATOR, *=
TOKEN_OPERATOR, /=
TOKEN_OPERATOR, %=
TOKEN_SINGLECOMMENT, Example Assignment
TOKEN_ID, counter
TOKEN_OPERATOR, +=
TOKEN_NUMBER, 1
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, Unary
TOKEN_OPERATOR, +
TOKEN_OPERATOR, -
TOKEN_OPERATOR, ++
TOKEN_OPERATOR, --
TOKEN_OPERATOR, !
TOKEN_SINGLECOMMENT, Example Unary
TOKEN_DATATYPE, int
TOKEN_ID, x
TOKEN_OPERATOR, =
TOKEN_NUMBER, 5
TOKEN_SEMI, ;
TOKEN_DATATYPE, int
TOKEN_ID, y
TOKEN_OPERATOR, =
TOKEN_OPERATOR, -
TOKEN_ID, x
TOKEN_SEMI, ;
TOKEN_ID, x
TOKEN_OPERATOR, ++
TOKEN_SEMI, ;
TOKEN_DATATYPE, bool
TOKEN_ID, flag
TOKEN_OPERATOR, =
TOKEN_BOOL, false
TOKEN_SEMI, ;
TOKEN_ID, print
TOKEN_LPAREN, (
TOKEN_OPERATOR, !
TOKEN_ID, flag
TOKEN_RPAREN, )
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, Keywords 
TOKEN_IF, if
TOKEN_ELSE, else
TOKEN_ELIF, elif
TOKEN_WHILE, while
TOKEN_DO, do
TOKEN_FUNCTION, function
TOKEN_RETURN, return
TOKEN_TRY, try
TOKEN_CATCH, catch
TOKEN_BOOL, true
TOKEN_BOOL, false
TOKEN_BREAK, break
TOKEN_TRY, try
TOKEN_CATCH, catch
TOKEN_BOOL, true
TOKEN_BOOL, false
TOKEN_BREAK, break
TOKEN_SINGLECOMMENT, Reserved words
TOKEN_RESERVEDWORDS, lambda
TOKEN_RESERVEDWORDS, in
TOKEN_RESERVEDWORDS, is
TOKEN_RESERVEDWORDS, finally
TOKEN_RESERVEDWORDS, raise
TOKEN_SINGLECOMMENT, Noise words
TOKEN_LOOP, loop
TOKEN_TERMINATE, terminate
TOKEN_TERMINATEALL, terminateall
TOKEN_PRINTOUT, printout
TOKEN_CHECK, check
TOKEN_OTHERWISE, otherwise
TOKEN_ENDLOOP, endloop
TOKEN_SINGLECOMMENT, this is a single comment
TOKEN_MULTICOMMENT,  this is 
multi 
line 
comments 
TOKEN_SINGLECOMMENT, Blank Spaces
TOKEN_DATATYPE, int
TOKEN_ID, a
TOKEN_OPERATOR, =
TOKEN_ID, b
TOKEN_BLANK, \s
TOKEN_BLANK, \t
TOKEN_BLANK, \n
TOKEN_OPERATOR, +
TOKEN_NUMBER, 5
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, Delimiter and Bracket
TOKEN_LPAREN, (
TOKEN_RPAREN, )
TOKEN_LBRACE, {
TOKEN_RBRACE, }
TOKEN_LBRACKET, [
TOKEN_RBRACKET, ]
TOKEN_COMMA, ,
TOKEN_SEMI, ;
TOKEN_SINGLECOMMENT, Invalid tokens
UNKNOWN_TOKEN, $
TOKEN_SYMBOL, @
UNKNOWN_TOKEN, Ã
UNKNOWN_TOKEN, †
